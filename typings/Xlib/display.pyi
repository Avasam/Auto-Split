""" # noqa Y021
This type stub file was generated by pyright.
"""

from types import MethodType
from typing import Any, Literal

from Xlib.protocol import display
from Xlib.protocol.request import (GetInputFocus, GetKeyboardControl, GetPointerControl, GetScreenSaver,
                                   ListFontsWithInfo, ListHosts, QueryExtension)
from Xlib.protocol.rq import GC, Colormap, Cursor, DictWrapper, Drawable, Font, Fontable, Pixmap, Resource, Window

_resource_baseclasses = ...
_resource_hierarchy = ...


class _BaseDisplay(display.Display):
    resource_classes = ...

    def __init__(self, *args, **keys) -> None:
        ...

    def get_atom(self, atomname, only_if_exists=...):
        ...


class Display:
    def __init__(self, display=...) -> None:
        ...

    def get_display_name(self) -> Any:
        ...

    def fileno(self) -> Any:
        ...

    def close(self) -> None:
        ...

    def set_error_handler(self, handler) -> None:
        ...

    def flush(self) -> None:
        ...

    def sync(self) -> None:
        ...

    def next_event(self):
        ...

    def pending_events(self) -> int:
        ...

    def has_extension(self, extension) -> bool:
        ...

    def create_resource_object(
            self,
            type,
            id) -> Resource | Drawable | Window | Pixmap | Fontable | Font | GC | Colormap | Cursor:
        ...

    def __getattr__(self, attr) -> MethodType:
        ...

    def screen(self, sno=...) -> DictWrapper:
        ...

    def screen_count(self) -> int:
        ...

    def get_default_screen(self) -> Any:
        ...

    def extension_add_method(self, object, name, function) -> None:
        ...

    def extension_add_event(self, code, evt, name=...) -> None:
        ...

    def add_extension_error(self, code, err) -> None:
        ...

    def keycode_to_keysym(self, keycode, index) -> Any | int:
        ...

    def keysym_to_keycode(self, keysym) -> Literal[0]:
        ...

    def keysym_to_keycodes(self, keysym) -> list[tuple[str, int]]:
        ...

    def refresh_keyboard_mapping(self, evt) -> None:
        ...

    def lookup_string(self, keysym) -> str | None:
        ...

    def rebind_string(self, keysym, newstring) -> None:
        ...

    def intern_atom(self, name, only_if_exists=...):
        ...

    def get_atom(self, atom, only_if_exists=...):
        ...

    def get_atom_name(self, atom):
        ...

    def get_selection_owner(self, selection):
        ...

    def send_event(self, destination, event, event_mask=..., propagate=..., onerror=...) -> None:
        ...

    def ungrab_pointer(self, time, onerror=...) -> None:
        ...

    def change_active_pointer_grab(self, event_mask, cursor, time, onerror=...) -> None:
        ...

    def ungrab_keyboard(self, time, onerror=...) -> None:
        ...

    def allow_events(self, mode, time, onerror=...) -> None:
        ...

    def grab_server(self, onerror=...) -> None:
        ...

    def ungrab_server(self, onerror=...) -> None:
        ...

    def warp_pointer(
            self,
            x,
            y,
            src_window=...,
            src_x=...,
            src_y=...,
            src_width=...,
            src_height=...,
            onerror=...) -> None:
        ...

    def set_input_focus(self, focus, revert_to, time, onerror=...) -> None:
        ...

    def get_input_focus(self) -> GetInputFocus:
        ...

    def query_keymap(self):
        ...

    def open_font(self, name) -> None:
        ...

    def list_fonts(self, pattern, max_names):
        ...

    def list_fonts_with_info(self, pattern, max_names) -> ListFontsWithInfo:
        ...

    def set_font_path(self, path, onerror=...) -> None:
        ...

    def get_font_path(self):
        ...

    def query_extension(self, name) -> QueryExtension | None:
        ...

    def list_extensions(self):
        ...

    def change_keyboard_mapping(self, first_keycode, keysyms, onerror=...) -> None:
        ...

    def get_keyboard_mapping(self, first_keycode, count):
        ...

    def change_keyboard_control(self, onerror=..., **keys) -> None:
        ...

    def get_keyboard_control(self) -> GetKeyboardControl:
        ...

    def bell(self, percent=..., onerror=...) -> None:
        ...

    def change_pointer_control(self, accel=..., threshold=..., onerror=...) -> None:
        ...

    def get_pointer_control(self) -> GetPointerControl:
        ...

    def set_screen_saver(self, timeout, interval, prefer_blank, allow_exposures, onerror=...) -> None:
        ...

    def get_screen_saver(self) -> GetScreenSaver:
        ...

    def change_hosts(self, mode, host_family, host, onerror=...) -> None:
        ...

    def list_hosts(self) -> ListHosts:
        ...

    def set_access_control(self, mode, onerror=...) -> None:
        ...

    def set_close_down_mode(self, mode, onerror=...) -> None:
        ...

    def force_screen_saver(self, mode, onerror=...) -> None:
        ...

    def set_pointer_mapping(self, map):
        ...

    def get_pointer_mapping(self):
        ...

    def set_modifier_mapping(self, keycodes):
        ...

    def get_modifier_mapping(self):
        ...

    def no_operation(self, onerror=...) -> None:
        ...
