""" # noqa Y021
This type stub file was generated by pyright.
"""

from typing import Any, Literal

from Xlib.xobject import drawable

_PY3: bool = ...


def _bytes_item(x: str) -> str:
    ...


class BadDataError(Exception):
    ...


signed_codes = ...
unsigned_codes = ...
array_unsigned_codes = ...
struct_to_array_codes = ...


class Field:
    name = ...
    default = ...
    structcode = ...
    structvalues = ...
    check_value = ...
    parse_value = ...
    keyword_args = ...

    def __init__(self) -> None:
        ...

    def parse_binary_value(self, data, display, length, format):
        ...


class Pad(Field):
    def __init__(self, size) -> None:
        ...


class ConstantField(Field):
    def __init__(self, value) -> None:
        ...


class Opcode(ConstantField):
    structcode = ...
    structvalues = ...


class ReplyCode(ConstantField):
    structcode = ...
    structvalues = ...

    def __init__(self) -> None:
        ...


class LengthField(Field):
    structcode = ...
    structvalues = ...

    def calc_length(self, length):
        ...


class TotalLengthField(LengthField):
    ...


class RequestLength(TotalLengthField):
    structcode = ...
    structvalues = ...

    def calc_length(self, length):
        ...


class ReplyLength(TotalLengthField):
    structcode = ...
    structvalues = ...

    def calc_length(self, length):
        ...


class LengthOf(LengthField):
    def __init__(self, name, size) -> None:
        ...


class OddLength(LengthField):
    structcode = ...
    structvalues = ...

    def __init__(self, name) -> None:
        ...

    def calc_length(self, length):
        ...

    def parse_value(self, value, display) -> Literal['even', 'odd']:
        ...


class FormatField(Field):
    structvalues = ...

    def __init__(self, name, size) -> None:
        ...


Format = FormatField


class ValueField(Field):
    def __init__(self, name, default=...) -> None:
        ...


class Int8(ValueField):
    structcode = ...
    structvalues = ...


class Int16(ValueField):
    structcode = ...
    structvalues = ...


class Int32(ValueField):
    structcode = ...
    structvalues = ...


class Card8(ValueField):
    structcode = ...
    structvalues = ...


class Card16(ValueField):
    structcode = ...
    structvalues = ...


class Card32(ValueField):
    structcode = ...
    structvalues = ...


class Resource(Card32):
    cast_function = ...
    class_name = ...

    def __init__(self, name, codes=..., default=...) -> None:
        ...

    def check_value(self, value) -> Any:
        ...

    def parse_value(self, value, display):
        ...


class Window(Resource):
    cast_function = ...
    class_name = ...


class Pixmap(Resource):
    cast_function = ...
    class_name = ...


class Drawable(Resource):
    cast_function = ...
    class_name = ...


class Fontable(Resource):
    cast_function = ...
    class_name = ...


class Font(Resource):
    cast_function = ...
    class_name = ...


class GC(Resource):
    cast_function = ...
    class_name = ...


class Colormap(Resource):
    cast_function = ...
    class_name = ...


class Cursor(Resource):
    cast_function = ...
    class_name = ...


class Bool(ValueField):
    structvalues = ...
    structcode = ...

    def check_value(self, value) -> bool:
        ...


class Set(ValueField):
    structvalues = ...

    def __init__(self, name, size, values, default=...) -> None:
        ...

    def check_value(self, val):
        ...


class Gravity(Set):
    def __init__(self, name) -> None:
        ...


class FixedString(ValueField):
    structvalues = ...

    def __init__(self, name, size) -> None:
        ...


class String8(ValueField):
    structcode = ...

    def __init__(self, name, pad=...) -> None:
        ...

    def pack_value(self, val) -> tuple[bytes | Unknown, int, None]:
        ...

    def parse_binary_value(self,
                           data,
                           display,
                           length,
                           format) -> tuple[Unknown,
                                            Literal[b'']] | tuple[Unknown,
                                                                  Unknown]:
        ...


class String16(ValueField):
    structcode = ...

    def __init__(self, name, pad=...) -> None:
        ...

    def pack_value(self, val) -> tuple[bytes, int, None]:
        ...

    def parse_binary_value(self, data, display, length, format) -> tuple[tuple[Any, ...], Unknown]:
        ...


class List(ValueField):
    structcode = ...

    def __init__(self, name, type, pad=...) -> None:
        ...

    def parse_binary_value(self, data, display, length, format):
        ...

    def pack_value(self, val) -> tuple[bytes, int, None]:
        ...


class FixedList(List):
    def __init__(self, name, size, type, pad=...) -> None:
        ...

    def parse_binary_value(self, data, display, length, format):
        ...

    def pack_value(self, val) -> tuple[bytes, int, None]:
        ...


class Object(ValueField):
    structcode = ...

    def __init__(self, name, type, default=...) -> None:
        ...

    def parse_binary_value(self, data, display, length, format) -> tuple[Unknown | Any | tuple[Any, ...], Unknown]:
        ...

    def parse_value(self, val, display):
        ...

    def pack_value(self, val) -> tuple[bytes, None, None]:
        ...

    def check_value(self, val) -> tuple[Unknown, ...] | list[Unknown]:
        ...


class PropertyData(ValueField):
    structcode = ...

    def parse_binary_value(self, data, display, length, format):
        ...

    def pack_value(self, value):
        ...


class FixedPropertyData(PropertyData):
    def __init__(self, name, size) -> None:
        ...

    def parse_binary_value(self, data, display, length, format):
        ...

    def pack_value(self, value) -> tuple[Unknown, Unknown, Unknown]:
        ...


class ValueList(Field):
    structcode = ...
    keyword_args = ...
    default = ...

    def __init__(self, name, mask, pad, *fields) -> None:
        ...

    def pack_value(self, arg, keys) -> tuple[bytes, None, None]:
        ...

    def parse_binary_value(self, data, display, length, format) -> tuple[DictWrapper, Unknown]:
        ...


class KeyboardMapping(ValueField):
    structcode = ...

    def parse_binary_value(self, data, display, length, format) -> tuple[list[Unknown], Unknown]:
        ...

    def pack_value(self, value) -> tuple[bytes, int, int]:
        ...


class ModifierMapping(ValueField):
    structcode = ...

    def parse_binary_value(self, data, display, length, format) -> tuple[list[Unknown], Unknown]:
        ...

    def pack_value(self, value) -> tuple[bytes, int, int]:
        ...


class EventField(ValueField):
    structcode = ...

    def pack_value(self, value) -> tuple[Unknown, None, None]:
        ...

    def parse_binary_value(self, data, display, length, format) -> tuple[Unknown, Unknown]:
        ...


class ScalarObj:
    def __init__(self, code) -> None:
        ...


Card8Obj = ...
Card16Obj = ...
Card32Obj = ...


class ResourceObj:
    structcode = ...
    structvalues = ...

    def __init__(self, class_name) -> None:
        ...

    def parse_value(self, value, display):
        ...


WindowObj = ...
ColormapObj = ...


class StrClass:
    structcode = ...

    def pack_value(self, val) -> bytes:
        ...

    def parse_binary(self, data, display) -> tuple[Unknown, Unknown]:
        ...


Str = ...


class Struct:

    def __init__(self, *fields) -> None:
        ...

    def to_binary(self, *varargs, **keys):
        ...

    def pack_value(self, value):
        ...

    def parse_value(self, val, display, rawdict=...) -> Any:
        ...

    def parse_binary(self, data, display, rawdict=...):
        ...


class TextElements8(ValueField):
    string_textitem = ...

    def pack_value(self, value):
        ...

    def parse_binary_value(self, data, display, length, format) -> tuple[list[Unknown], Literal[b'']]:
        ...


class TextElements16(TextElements8):
    string_textitem = ...


class GetAttrData:
    _data: dict[str, int] = ...
    root: drawable.Window = ...
    children: list[drawable.Window] = ...

    def __getattr__(self, attr):
        ...


class DictWrapper(GetAttrData):
    def __init__(self, dict) -> None:
        ...

    def __getitem__(self, key):
        ...

    def __setitem__(self, key, value) -> None:
        ...

    def __delitem__(self, key) -> None:
        ...

    def __setattr__(self, key, value) -> None:
        ...

    def __delattr__(self, key) -> None:
        ...


class Request:
    def __init__(self, display, onerror=..., *args, **keys) -> None:
        ...


class ReplyRequest(GetAttrData):
    def __init__(self, display, defer=..., *args, **keys) -> None:
        ...

    def reply(self) -> None:
        ...


class Event(GetAttrData):
    def __init__(self, binarydata=..., display=..., **keys) -> None:
        ...


def call_error_handler(handler, error, request) -> Literal[0]:
    ...
