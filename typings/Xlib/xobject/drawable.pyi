""" # noqa Y021
This type stub file was generated by pyright.
"""

from Xlib.protocol.request import (GetGeometry, GetImage, GetProperty, GetWindowAttributes, QueryBestSize, QueryPointer,
                                   QueryTree, TranslateCoords)
from Xlib.xobject import resource

#


class Drawable(resource.Resource):
    __drawable__ = ...

    def get_geometry(self) -> GetGeometry:
        ...

    def create_pixmap(self, width, height, depth):
        ...

    def create_gc(self, **keys):
        ...

    def copy_area(self, gc, src_drawable, src_x, src_y, width, height, dst_x, dst_y, onerror=...) -> None:
        ...

    def copy_plane(self, gc, src_drawable, src_x, src_y, width, height, dst_x, dst_y, bit_plane, onerror=...) -> None:
        ...

    def poly_point(self, gc, coord_mode, points, onerror=...) -> None:
        ...

    def point(self, gc, x, y, onerror=...) -> None:
        ...

    def poly_line(self, gc, coord_mode, points, onerror=...) -> None:
        ...

    def line(self, gc, x1, y1, x2, y2, onerror=...) -> None:
        ...

    def poly_segment(self, gc, segments, onerror=...) -> None:
        ...

    def poly_rectangle(self, gc, rectangles, onerror=...) -> None:
        ...

    def rectangle(self, gc, x, y, width, height, onerror=...) -> None:
        ...

    def poly_arc(self, gc, arcs, onerror=...) -> None:
        ...

    def arc(self, gc, x, y, width, height, angle1, angle2, onerror=...) -> None:
        ...

    def fill_poly(self, gc, shape, coord_mode, points, onerror=...) -> None:
        ...

    def poly_fill_rectangle(self, gc, rectangles, onerror=...) -> None:
        ...

    def fill_rectangle(self, gc, x, y, width, height, onerror=...) -> None:
        ...

    def poly_fill_arc(self, gc, arcs, onerror=...) -> None:
        ...

    def fill_arc(self, gc, x, y, width, height, angle1, angle2, onerror=...) -> None:
        ...

    def put_image(self, gc, x, y, width, height, format, depth, left_pad, data, onerror=...) -> None:
        ...

    def put_pil_image(self, gc, x, y, image, onerror=...) -> None:
        ...

    def get_image(self, x, y, width, height, format, plane_mask) -> GetImage:
        ...

    def draw_text(self, gc, x, y, text, onerror=...) -> None:
        ...

    def poly_text(self, gc, x, y, items, onerror=...) -> None:
        ...

    def poly_text_16(self, gc, x, y, items, onerror=...) -> None:
        ...

    def image_text(self, gc, x, y, string, onerror=...) -> None:
        ...

    def image_text_16(self, gc, x, y, string, onerror=...) -> None:
        ...

    def query_best_size(self, item_class, width, height) -> QueryBestSize:
        ...


class Window(Drawable):
    __window__ = ...

    def create_window(
            self,
            x,
            y,
            width,
            height,
            border_width,
            depth,
            window_class=...,
            visual=...,
            onerror=...,
            **keys):
        ...

    def change_attributes(self, onerror=..., **keys) -> None:
        ...

    def get_attributes(self) -> GetWindowAttributes:
        ...

    def destroy(self, onerror=...) -> None:
        ...

    def destroy_sub_windows(self, onerror=...) -> None:
        ...

    def change_save_set(self, mode, onerror=...) -> None:
        ...

    def reparent(self, parent, x, y, onerror=...) -> None:
        ...

    def map(self, onerror=...) -> None:
        ...

    def map_sub_windows(self, onerror=...) -> None:
        ...

    def unmap(self, onerror=...) -> None:
        ...

    def unmap_sub_windows(self, onerror=...) -> None:
        ...

    def configure(self, onerror=..., **keys) -> None:
        ...

    def circulate(self, direction, onerror=...) -> None:
        ...

    def raise_window(self, onerror=...) -> None:
        ...

    def query_tree(self) -> QueryTree:
        ...

    def change_property(self, property, type, format, data, mode=..., onerror=...) -> None:
        ...

    def delete_property(self, property, onerror=...) -> None:
        ...

    def get_property(self, property, type, offset, length, delete=...) -> GetProperty | None:
        ...

    def get_full_property(self, property, type, sizehint=...) -> GetProperty | None:
        ...

    def list_properties(self):
        ...

    def set_selection_owner(self, selection, time, onerror=...) -> None:
        ...

    def convert_selection(self, selection, target, property, time, onerror=...) -> None:
        ...

    def send_event(self, event, event_mask=..., propagate=..., onerror=...) -> None:
        ...

    def grab_pointer(self, owner_events, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        ...

    def grab_button(
            self,
            button,
            modifiers,
            owner_events,
            event_mask,
            pointer_mode,
            keyboard_mode,
            confine_to,
            cursor,
            onerror=...) -> None:
        ...

    def ungrab_button(self, button, modifiers, onerror=...) -> None:
        ...

    def grab_keyboard(self, owner_events, pointer_mode, keyboard_mode, time):
        ...

    def grab_key(self, key, modifiers, owner_events, pointer_mode, keyboard_mode, onerror=...) -> None:
        ...

    def ungrab_key(self, key, modifiers, onerror=...) -> None:
        ...

    def query_pointer(self) -> QueryPointer:
        ...

    def get_motion_events(self, start, stop):
        ...

    def translate_coords(self, src_window, src_x, src_y) -> TranslateCoords:
        ...

    def warp_pointer(
            self,
            x,
            y,
            src_window=...,
            src_x=...,
            src_y=...,
            src_width=...,
            src_height=...,
            onerror=...) -> None:
        ...

    def set_input_focus(self, revert_to, time, onerror=...) -> None:
        ...

    def clear_area(self, x=..., y=..., width=..., height=..., exposures=..., onerror=...) -> None:
        ...

    def create_colormap(self, visual, alloc):
        ...

    def list_installed_colormaps(self):
        ...

    def rotate_properties(self, properties, delta, onerror=...) -> None:
        ...

    def set_wm_name(self, name, onerror=...) -> None:
        ...

    def get_wm_name(self) -> None:
        ...

    def set_wm_icon_name(self, name, onerror=...) -> None:
        ...

    def get_wm_icon_name(self) -> None:
        ...

    def set_wm_class(self, inst, cls, onerror=...) -> None:
        ...

    def get_wm_class(self) -> tuple[str, str] | None:
        ...

    def set_wm_transient_for(self, window, onerror=...) -> None:
        ...

    def get_wm_transient_for(self) -> None:
        ...

    def set_wm_protocols(self, protocols, onerror=...) -> None:
        ...

    def get_wm_protocols(self) -> list[str]:
        ...

    def set_wm_colormap_windows(self, windows, onerror=...) -> None:
        ...

    def get_wm_colormap_windows(self) -> list:
        ...

    def set_wm_client_machine(self, name, onerror=...) -> None:
        ...

    def get_wm_client_machine(self) -> None:
        ...

    def set_wm_normal_hints(self, hints=..., onerror=..., **keys) -> None:
        ...

    def get_wm_normal_hints(self) -> None:
        ...

    def set_wm_hints(self, hints=..., onerror=..., **keys) -> None:
        ...

    def get_wm_hints(self) -> None:
        ...

    def set_wm_state(self, hints=..., onerror=..., **keys) -> None:
        ...

    def get_wm_state(self) -> None:
        ...

    def set_wm_icon_size(self, hints=..., onerror=..., **keys) -> None:
        ...

    def get_wm_icon_size(self) -> None:
        ...


class Pixmap(Drawable):
    __pixmap__ = ...

    def free(self, onerror=...) -> None:
        ...

    def create_cursor(self, mask, f_rgb, b_rgb, x, y):
        ...


def roundup(value, unit):
    ...
