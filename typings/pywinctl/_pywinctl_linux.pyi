""" # noqa Y021
This type stub file was partially generated by pyright.
"""
import sys

if sys.platform != "linux":
    return  # pyright: ignore # noqa: F706

from typing import Any, Literal

from pywinctl import BaseWindow, Point, Rect, Size
from Xlib.xobject.colormap import Colormap
from Xlib.xobject.cursor import Cursor
from Xlib.xobject.drawable import Drawable, Pixmap, Window
from Xlib.xobject.fontable import GC, Font, Fontable
from Xlib.xobject.resource import Resource

DISP = ...
SCREEN = ...
ROOT = ...
EWMH = ...
WAIT_ATTEMPTS = ...
WAIT_DELAY = ...
WM_CHANGE_STATE = ...
WM_STATE = ...
STATE_MODAL = ...
STATE_STICKY = ...
STATE_MAX_VERT = ...
STATE_MAX_HORZ = ...
STATE_SHADED = ...
STATE_SKIP_TASKBAR = ...
STATE_SKIP_PAGER = ...
STATE_HIDDEN = ...
STATE_FULLSCREEN = ...
STATE_ABOVE = ...
STATE_BELOW = ...
STATE_ATTENTION = ...
STATE_FOCUSED = ...
STATE_NULL = ...
ACTION_UNSET = ...
ACTION_SET = ...
ACTION_TOGGLE = ...
WM_WINDOW_TYPE = ...
WINDOW_DESKTOP = ...
WINDOW_NORMAL = ...
HINT_STATE_WITHDRAWN = ...
HINT_STATE_NORMAL = ...
HINT_STATE_ICONIC = ...


def checkPermissions(activate: bool = ...) -> Literal[True]:
    ...


def getActiveWindow() -> LinuxWindow | None:
    ...


def getActiveWindowTitle() -> str:
    ...


def getAllWindows() -> list[LinuxWindow]:
    ...


def getAllTitles() -> list[str]:
    ...


def getWindowsWithTitle(title, app=..., condition=..., flags=...):
    ...


def getAllAppsNames() -> list[str]:
    ...


def getAppsWithName(name, condition=..., flags=...):
    ...


def getAllAppsWindowsTitles() -> dict:
    ...


def getWindowsAt(x: int, y: int) -> list[LinuxWindow]:
    ...


class LinuxWindow(BaseWindow):
    def __init__(self, hWnd: Cursor | Drawable | Pixmap | Resource | Fontable | Window | GC | Colormap | Font) -> None:
        ...

    def getExtraFrameSize(self, includeBorder: bool = ...) -> tuple[int, int, int, int]:
        ...

    def getClientFrame(self) -> Rect:
        ...

    def close(self) -> bool:
        ...

    def minimize(self, wait: bool = ...) -> bool:
        ...

    def maximize(self, wait: bool = ...) -> bool:
        ...

    def restore(self, wait: bool = ...) -> bool:
        ...

    def show(self, wait: bool = ...) -> bool:
        ...

    def hide(self, wait: bool = ...) -> bool:
        ...

    def activate(self, wait: bool = ...) -> bool:
        ...

    def resize(self, widthOffset: int, heightOffset: int, wait: bool = ...) -> bool:
        ...

    resizeRel = ...

    def resizeTo(self, newWidth: int, newHeight: int, wait: bool = ...) -> bool:
        ...

    def move(self, xOffset: int, yOffset: int, wait: bool = ...) -> bool:
        ...

    moveRel = ...

    def moveTo(self, newLeft: int, newTop: int, wait: bool = ...) -> bool:
        ...

    def alwaysOnTop(self, aot: bool = ...) -> bool:
        ...

    def alwaysOnBottom(self, aob: bool = ...) -> bool:
        ...

    def lowerWindow(self) -> bool:
        ...

    def raiseWindow(self) -> bool:
        ...

    def sendBehind(self, sb: bool = ...) -> bool:
        ...

    def getAppName(self) -> str:
        ...

    def getParent(self) -> Cursor | Drawable | Pixmap | Resource | Fontable | Window | GC | Colormap | Font:
        ...

    def getChildren(self) -> list[int]:
        ...

    def getHandle(self) -> Cursor | Drawable | Pixmap | Resource | Fontable | Window | GC | Colormap | Font:
        ...

    def isParent(self, child: Cursor | Drawable | Pixmap | Resource | Fontable | Window | GC | Colormap | Font) -> bool:
        ...

    isParentOf = ...

    def isChild(self, parent: Cursor | Drawable | Pixmap | Resource | Fontable | Window | GC | Colormap | Font) -> bool:
        ...

    isChildOf = ...

    def getDisplay(self) -> Literal['']:
        ...

    @property
    def isMinimized(self) -> bool:
        ...

    @property
    def isMaximized(self) -> bool:
        ...

    @property
    def isActive(self) -> bool:
        ...

    @property
    def title(self) -> str:
        ...

    @property
    def visible(self) -> bool:
        ...

    isVisible = ...

    @property
    def isAlive(self) -> bool:
        ...

    class _WatchDog:

        def __init__(self, parent) -> None:
            ...

        def start(
                self,
                isAliveCB=...,
                isActiveCB=...,
                isVisibleCB=...,
                isMinimizedCB=...,
                isMaximizedCB=...,
                resizedCB=...,
                movedCB=...,
                changedTitleCB=...,
                changedDisplayCB=...,
                interval=...) -> None:
            ...

        def updateCallbacks(
                self,
                isAliveCB=...,
                isActiveCB=...,
                isVisibleCB=...,
                isMinimizedCB=...,
                isMaximizedCB=...,
                resizedCB=...,
                movedCB=...,
                changedTitleCB=...,
                changedDisplayCB=...) -> None:
            ...

        def updateInterval(self, interval=...) -> None:
            ...

        def setTryToFind(self, tryToFind: bool) -> None:
            ...

        def stop(self) -> None:
            ...

        def isAlive(self) -> bool:
            ...


def getAllScreens() -> dict[str, dict[str, Any]]:
    ...


def getMousePos() -> Point:
    ...


cursor = ...


def getScreenSize(name: str = ...) -> Size:
    ...


resolution = ...


def getWorkArea(name: str = ...) -> Rect:
    ...


def displayWindowsUnderMouse(xOffset: int = ..., yOffset: int = ...) -> None:
    ...


def main() -> None:
    ...
