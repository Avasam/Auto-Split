""" # noqa Y021
This type stub file was partially generated by pyright.
"""
import sys

if sys.platform != "win32":
    return  # pyright: ignore # noqa: F706

import threading
from typing import Any, Literal

import win32gui_struct
from pywinctl import BaseWindow, Point, Rect, Size

WAIT_ATTEMPTS = ...
WAIT_DELAY = ...


def checkPermissions(activate: bool = ...) -> Literal[True]:
    ...


def getActiveWindow() -> Win32Window | None:
    ...


def getActiveWindowTitle() -> str:
    ...


def getAllWindows() -> list[Win32Window]:
    ...


def getAllTitles() -> list[str]:
    ...


def getWindowsWithTitle(title, app=..., condition=..., flags=...):
    ...


def getAllAppsNames() -> list[str]:
    ...


def getAppsWithName(name, condition=..., flags=...):
    ...


def getAllAppsWindowsTitles() -> dict:
    ...


def getWindowsAt(x: int, y: int) -> list[Win32Window]:
    ...


def getTopWindowAt(x: int, y: int) -> Win32Window:
    ...


class Win32Window(BaseWindow):
    def __init__(self, hWnd: int) -> None:
        ...

    def getExtraFrameSize(self, includeBorder: bool = ...) -> tuple[int, int, int, int]:
        ...

    def getClientFrame(self) -> Rect:
        ...

    def close(self) -> bool:
        ...

    def minimize(self, wait: bool = ...) -> bool:
        ...

    def maximize(self, wait: bool = ...) -> bool:
        ...

    def restore(self, wait: bool = ...) -> bool:
        ...

    def show(self, wait: bool = ...) -> bool:
        ...

    def hide(self, wait: bool = ...) -> bool:
        ...

    def activate(self, wait: bool = ...) -> bool:
        ...

    def resize(self, widthOffset: int, heightOffset: int, wait: bool = ...) -> bool:
        ...

    resizeRel = ...

    def resizeTo(self, newWidth: int, newHeight: int, wait: bool = ...) -> bool:
        ...

    def move(self, xOffset: int, yOffset: int, wait: bool = ...) -> bool:
        ...

    moveRel = ...

    def moveTo(self, newLeft: int, newTop: int, wait: bool = ...) -> bool:
        ...

    def alwaysOnTop(self, aot: bool = ...) -> bool:
        ...

    def alwaysOnBottom(self, aob: bool = ...) -> bool:
        ...

    def lowerWindow(self) -> bool:
        ...

    def raiseWindow(self) -> bool:
        ...

    def sendBehind(self, sb: bool = ...) -> bool:
        ...

    def getAppName(self) -> str:
        ...

    def getParent(self) -> int:
        ...

    def getChildren(self) -> list[int]:
        ...

    def getHandle(self) -> int:
        ...

    def isParent(self, child: int) -> bool:
        ...

    isParentOf = ...

    def isChild(self, parent: int) -> bool:
        ...

    isChildOf = ...

    def getDisplay(self) -> str:
        ...

    @property
    def isMinimized(self) -> bool:
        ...

    @property
    def isMaximized(self) -> bool:
        ...

    @property
    def isActive(self) -> bool:
        ...

    @property
    def title(self) -> str:
        ...

    @property
    def visible(self) -> bool:
        ...

    isVisible = ...

    @property
    def isAlive(self) -> bool:
        ...

    class _WatchDog:

        def __init__(self, parent) -> None:
            ...

        def start(
                self,
                isAliveCB=...,
                isActiveCB=...,
                isVisibleCB=...,
                isMinimizedCB=...,
                isMaximizedCB=...,
                resizedCB=...,
                movedCB=...,
                changedTitleCB=...,
                changedDisplayCB=...,
                interval=...) -> None:
            ...

        def updateCallbacks(
                self,
                isAliveCB=...,
                isActiveCB=...,
                isVisibleCB=...,
                isMinimizedCB=...,
                isMaximizedCB=...,
                resizedCB=...,
                movedCB=...,
                changedTitleCB=...,
                changedDisplayCB=...) -> None:
            ...

        def updateInterval(self, interval=...) -> None:
            ...

        def setTryToFind(self, tryToFind: bool) -> None:
            ...

        def stop(self) -> None:
            ...

        def isAlive(self) -> bool:
            ...

    class _Menu:
        def __init__(self, parent: BaseWindow) -> None:
            ...

        def getMenu(self, addItemInfo: bool = ...) -> dict:
            ...

        def clickMenuItem(self, itemPath: list = ..., wID: int = ...) -> bool:
            ...

        def getMenuInfo(self, hSubMenu: int = ...) -> win32gui_struct.UnpackMENUINFO:
            ...

        def getMenuItemCount(self, hSubMenu: int = ...) -> int:
            ...

        def getMenuItemInfo(self, hSubMenu: int, wID: int) -> win32gui_struct.UnpackMENUITEMINFO:
            ...

        def getMenuItemRect(self, hSubMenu: int, wID: int) -> Rect:
            ...


class _SendBottom(threading.Thread):
    def __init__(self, hWnd, interval=...) -> None:
        ...

    def run(self) -> None:
        ...

    def kill(self) -> None:
        ...


def getAllScreens() -> dict[str, dict[str, Any]]:
    ...


def getMousePos() -> Point:
    ...


cursor = ...


def getScreenSize(name: str = ...) -> Size:
    ...


resolution = ...


def getWorkArea(name: str = ...) -> Rect:
    ...


def displayWindowsUnderMouse(xOffset: int = ..., yOffset: int = ...) -> None:
    ...


def main() -> None:
    ...
