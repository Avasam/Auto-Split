""" # noqa Y021
This type stub file was partially generated by pyright.
"""

import collections
import difflib
import re
import sys
import threading

import pyrect

from ._pywinctl_win import (Win32Window, checkPermissions, getActiveWindow, getActiveWindowTitle, getAllAppsNames,
                            getAllAppsWindowsTitles, getAllScreens, getAllTitles, getAllWindows, getAppsWithName,
                            getMousePos, getScreenSize, getWindowsAt, getWindowsWithTitle, getWorkArea)

__all__ = [
    "checkPermissions",
    "getActiveWindow",
    "getActiveWindowTitle",
    "getAllAppsNames",
    "getAllAppsWindowsTitles",
    "getAllScreens",
    "getAllTitles",
    "getAllWindows",
    "getAppsWithName",
    "getMousePos",
    "getScreenSize",
    "getWindowsAt",
    "getWindowsWithTitle",
    "getWorkArea"]
__version__ = ...
Rect = ...
Point = ...
Size = ...


def pointInRect(x, y, left, top, width, height):
    ...


def version(numberOnly=...) -> Literal['0.0.38', 'PyWinCtl-0.0.38']:
    ...


class Re:
    IS = ...
    CONTAINS = ...
    STARTSWITH = ...
    ENDSWITH = ...
    NOTIS = ...
    NOTCONTAINS = ...
    NOTSTARTSWITH = ...
    NOTENDSWITH = ...
    MATCH = ...
    NOTMATCH = ...
    EDITDISTANCE = ...
    DIFFRATIO = ...
    IGNORECASE = ...
    _cond_dic = ...


class BaseWindow:
    def __init__(self) -> None:
        ...

    def __str__(self) -> str:
        ...

    def getExtraFrameSize(self, includeBorder: bool = ...) -> tuple[int, int, int, int]:
        ...

    def getClientFrame(self):
        ...

    def close(self) -> bool:
        ...

    def minimize(self, wait: bool = ...) -> bool:
        ...

    def maximize(self, wait: bool = ...) -> bool:
        ...

    def restore(self, wait: bool = ...) -> bool:
        ...

    def hide(self, wait: bool = ...) -> bool:
        ...

    def show(self, wait: bool = ...) -> bool:
        ...

    def activate(self, wait: bool = ...) -> bool:
        ...

    def resize(self, widthOffset: int, heightOffset: int, wait: bool = ...) -> bool:
        ...

    resizeRel = ...

    def resizeTo(self, newWidth: int, newHeight: int, wait: bool = ...) -> bool:
        ...

    def move(self, xOffset: int, yOffset: int, wait: bool = ...) -> bool:
        ...

    moveRel = ...

    def moveTo(self, newLeft: int, newTop: int, wait: bool = ...) -> bool:
        ...

    def alwaysOnTop(self, aot: bool = ...) -> bool:
        ...

    def alwaysOnBottom(self, aob: bool = ...) -> bool:
        ...

    def lowerWindow(self) -> bool:
        ...

    def raiseWindow(self) -> bool:
        ...

    def sendBehind(self, sb: bool = ...) -> bool:
        ...

    def getAppName(self) -> str:
        ...

    def getParent(self):
        ...

    def getChildren(self) -> list[int]:
        ...

    def getHandle(self):
        ...

    def isParent(self, child) -> bool:
        ...

    isParentOf = ...

    def isChild(self, parent) -> bool:
        ...

    isChildOf = ...

    def getDisplay(self) -> str:
        ...

    @property
    def isMinimized(self) -> bool:
        ...

    @property
    def isMaximized(self) -> bool:
        ...

    @property
    def isActive(self) -> bool:
        ...

    @property
    def title(self) -> str:
        ...

    @property
    def updatedTitle(self) -> str:
        ...

    @property
    def visible(self) -> bool:
        ...

    isVisible = ...

    @property
    def isAlive(self) -> bool:
        ...

    @property
    def left(self) -> float | int:
        ...

    @left.setter
    def left(self, value) -> None:
        ...

    @property
    def right(self) -> float | int:
        ...

    @right.setter
    def right(self, value) -> None:
        ...

    @property
    def top(self) -> float | int:
        ...

    @top.setter
    def top(self, value) -> None:
        ...

    @property
    def bottom(self) -> float | int:
        ...

    @bottom.setter
    def bottom(self, value) -> None:
        ...

    @property
    def topleft(self) -> Point:
        ...

    @topleft.setter
    def topleft(self, value) -> None:
        ...

    @property
    def topright(self) -> Point:
        ...

    @topright.setter
    def topright(self, value) -> None:
        ...

    @property
    def bottomleft(self) -> Point:
        ...

    @bottomleft.setter
    def bottomleft(self, value) -> None:
        ...

    @property
    def bottomright(self) -> Point:
        ...

    @bottomright.setter
    def bottomright(self, value) -> None:
        ...

    @property
    def midleft(self) -> Point:
        ...

    @midleft.setter
    def midleft(self, value) -> None:
        ...

    @property
    def midright(self) -> Point:
        ...

    @midright.setter
    def midright(self, value) -> None:
        ...

    @property
    def midtop(self) -> Point:
        ...

    @midtop.setter
    def midtop(self, value) -> None:
        ...

    @property
    def midbottom(self) -> Point:
        ...

    @midbottom.setter
    def midbottom(self, value) -> None:
        ...

    @property
    def center(self) -> Point:
        ...

    @center.setter
    def center(self, value) -> None:
        ...

    @property
    def centerx(self) -> float | int:
        ...

    @centerx.setter
    def centerx(self, value) -> None:
        ...

    @property
    def centery(self) -> float | int:
        ...

    @centery.setter
    def centery(self, value) -> None:
        ...

    @property
    def width(self) -> float | int:
        ...

    @width.setter
    def width(self, value) -> None:
        ...

    @property
    def height(self) -> float | int:
        ...

    @height.setter
    def height(self, value) -> None:
        ...

    @property
    def size(self) -> Size:
        ...

    @size.setter
    def size(self, value) -> None:
        ...

    @property
    def area(self) -> float | int:
        ...

    @area.setter
    def area(self, value) -> None:
        ...

    @property
    def box(self) -> Box:
        ...

    @box.setter
    def box(self, value) -> None:
        ...


class _WinWatchDog(threading.Thread):
    def __init__(
            self,
            win: BaseWindow,
            isAliveCB=...,
            isActiveCB=...,
            isVisibleCB=...,
            isMinimizedCB=...,
            isMaximizedCB=...,
            resizedCB=...,
            movedCB=...,
            changedTitleCB=...,
            changedDisplayCB=...,
            interval=...) -> None:
        ...

    def run(self) -> None:
        ...

    def updateCallbacks(
            self,
            isAliveCB=...,
            isActiveCB=...,
            isVisibleCB=...,
            isMinimizedCB=...,
            isMaximizedCB=...,
            resizedCB=...,
            movedCB=...,
            changedTitleCB=...,
            changedDisplayCB=...) -> None:
        ...

    def updateInterval(self, interval=...) -> None:
        ...

    def setTryToFind(self, tryToFind) -> None:
        ...

    def kill(self) -> None:
        ...


if sys.platform == "darwin":
    ...
else:
    Window = Win32Window
