""" # noqa: Y021
This type stub file was generated by pyright.
"""

from collections.abc import Callable
from ctypes.wintypes import LONG
from enum import Enum
from typing import Literal, TypedDict

from comtypes._comobject import COMObject
from comtypes.gen._78530B68_61F9_11D2_8CAD_00A024580902_0_1_0 import IBaseFilter, IEnumPins, IPin
from comtypes.GUID import GUID

# from pygrabber.dshow_core import *
# from pygrabber.dshow_ids import *
# from pygrabber.win_api_extra import *
# from pygrabber.windows_media import *


class StateGraph(Enum):
    Stopped = ...
    Paused = ...
    Running = ...


class RecordingFormat(Enum):
    AVI = ...
    ASF = ...


class FilterType(Enum):
    video_input = ...
    audio_input = ...
    video_compressor = ...
    audio_compressor = ...
    sample_grabber = ...
    render = ...
    file_sink = ...
    muxer = ...
    smart_tee = ...


class Filter:
    def __init__(self, instance: IBaseFilter, name: IBaseFilter, capture_builder: IBaseFilter) -> None:
        ...

    def get_out(self) -> IEnumPins:
        ...

    def get_in(self, index: int = ...) -> IEnumPins:
        ...

    def find_pin(self, direction: Literal[0, 1], category: GUID | None = ..., type=..., unconnected=...) -> None:
        ...

    def reload_pins(self) -> None:
        ...

    def set_properties(self) -> None:
        ...

    def get_name(self) -> str:
        ...

    def print_info(self) -> None:
        ...


class GetFormats(TypedDict):
    index: int
    media_type_str: str
    width: LONG
    height: LONG
    min_framerate: float
    max_framerate: float


class VideoInput(Filter):
    def __init__(self, args: tuple[IBaseFilter, IBaseFilter], capture_builder: IBaseFilter) -> None:
        ...

    def get_current_format(self) -> tuple[LONG, LONG]:
        ...

    def get_formats(self) -> list[GetFormats]:
        ...

    def set_format(self, format_index: int) -> None:
        ...

    def show_format_dialog(self) -> None:
        ...


class AudioInput(Filter):
    def __init__(self, args: tuple[IBaseFilter, IBaseFilter], capture_builder: IBaseFilter) -> None:
        ...


class VideoCompressor(Filter):
    def __init__(self, args: tuple[IBaseFilter, IBaseFilter], capture_builder: IBaseFilter) -> None:
        ...


class AudioCompressor(Filter):
    def __init__(self, args: tuple[IBaseFilter, IBaseFilter], capture_builder: IBaseFilter) -> None:
        ...


class Render(Filter):
    def __init__(self, instance: IBaseFilter, capture_builder: IBaseFilter) -> None:
        ...

    def configure_video_window(self, handle: int) -> None:
        ...

    def set_window_position(self, x: int, y: int, width: int, height: int) -> None:
        ...


class SampleGrabber(Filter):
    def __init__(self, capture_builder: IBaseFilter) -> None:
        ...

    def set_callback(self, callback: Callable, which_method_to_callback) -> None:
        ...

    def set_media_type(self, media_type: str, media_subtype: str) -> None:
        ...

    def get_resolution(self) -> tuple[LONG, LONG]:
        ...

    def initialize_after_connection(self) -> None:
        ...


class SmartTee(Filter):
    def __init__(self, capture_builder: IBaseFilter) -> None:
        ...


class Muxer(Filter):
    def __init__(self, args: tuple[IBaseFilter, IBaseFilter], capture_builder: IBaseFilter) -> None:
        ...


class SystemDeviceEnum:
    def __init__(self) -> None:
        ...

    def get_available_filters(self, category_clsid: str) -> list[IBaseFilter]:
        ...

    def get_filter_by_index(self, category_clsid: str, index: int) -> tuple[IBaseFilter, IBaseFilter]:
        ...


class FilterFactory:
    def __init__(self, system_device_enum: SystemDeviceEnum, capture_builder: IBaseFilter) -> None:
        ...

    def build_filter(self, filter_type: FilterType, id: int) -> Filter:
        ...


class MediaType:
    def __init__(self, majortype_guid: str, subtype_guid: str) -> None:
        ...


class WmProfileManager:
    def __init__(self) -> None:
        ...


class FilterGraph:
    def __init__(self) -> None:
        ...

    def add_video_input_device(self, index: int) -> None:
        ...

    def add_audio_input_device(self, index: int) -> None:
        ...

    def add_video_compressor(self, index: int) -> None:
        ...

    def add_audio_compressor(self, index: int) -> None:
        ...

    def add_sample_grabber(self, callback: Callable) -> None:
        ...

    def add_null_render(self) -> None:
        ...

    def add_default_render(self) -> None:
        ...

    def add_video_mixing_render(self) -> None:
        ...

    def add_file_writer_and_muxer(self, filename: str) -> None:
        ...

    def configure_asf_compressor(self) -> None:
        ...

    def prepare_preview_graph(self) -> None:
        ...

    def prepare_recording_graph(self) -> None:
        ...

    def configure_render(self, handle: int) -> None:
        ...

    def update_window(self, width: int, height: int) -> None:
        ...

    def run(self) -> None:
        ...

    def stop(self) -> None:
        ...

    def pause(self) -> None:
        ...

    def get_state(self) -> StateGraph:
        ...

    def get_input_devices(self) -> list[str]:
        ...

    def get_audio_devices(self) -> list[str]:
        ...

    def get_video_compressors(self) -> list[str]:
        ...

    def get_audio_compressors(self) -> list[str]:
        ...

    def get_asf_profiles(self) -> list[str]:
        ...

    def grab_frame(self) -> bool:
        ...

    def get_input_device(self) -> str:
        ...

    def remove_filters(self) -> None:
        ...

    def remove_all_filters_but_video_source(self) -> None:
        ...

    def print_debug_info(self) -> None:
        ...


class FilterGraphDebugHelper:
    def __init__(self, filter_graph: FilterGraph) -> None:
        ...

    def print_graph_info(self) -> None:
        ...

    def get_filter_name(self, filter: IBaseFilter) -> str:
        ...

    def get_pin_info(self, pin: IPin) -> tuple[str, str, IPin | None, IBaseFilter]:
        ...


class SampleGrabberCallback(COMObject):
    _com_interfaces_ = ...

    def __init__(self, callback: Callable) -> None:
        ...

    def grab_frame(self) -> None:
        ...

    def SampleCB(self, this, SampleTime, pSample) -> Literal[0]:
        ...

    def BufferCB(self, this, SampleTime, pBuffer, BufferLen) -> Literal[0]:
        ...


def get_moniker_name(moniker) -> str:
    ...


def show_properties(object) -> None:
    ...
